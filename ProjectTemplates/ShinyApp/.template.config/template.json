{
    "$schema": "http://json.schemastore.org/template",
    "author": "Shiny .NET",
    "classifications": [ "MAUI", "Shiny", "Prism", "ReactiveUI" ],
    "name": "Shiny MAUI Application",
    "shortName": "shinymaui",
    "description": "A project for creating a .NET MAUI /w Shiny.NET, Prism, & ReactiveUI",
    "identity": "Shiny.Templates.App",
    "sourceName": "ShinyApp",
    "preferNameDirectory": true,    
    "tags": {
        "language": "C#",
        "type": "project"
    },    
    "primaryOutputs": [{
        "condition": "(HostIdentifier != \"dotnetcli\" && HostIdentifier != \"dotnetcli-preview\")",
        "path": "MauiProgram.cs"
    }],
    "guids": [
        "07CD65EF-6238-4365-AF5D-F6D433967F48",
        "8B51DC95-6D07-4C39-BC6C-3BFE96E8A7EA"
    ],   
    "symbols":{
        "Framework": {
            "type": "parameter",
            "description": "The target framework for the project.",
            "datatype": "choice",
            "choices": [{
                "choice": "net6.0",
                "description": "Target .NET 6.0"
            },{
                "choice": "net7.0",
                "description": "Target .NET 7.0"
            }],
            "replaces": "{DOTNET_TFM}",
            "defaultValue": "net7.0"
        },
        "applicationId": {
            "type": "parameter",
            "description": "Set the Application Identifier",
            "datatype": "string",
            "defaultValue": "com.companyname.app",
            "isRequired": true,
            "replaces": "{APPLICATION_ID}"
        },
        "shinyframework": {
            "type": "parameter",
            "datatype": "bool",
            "defaultValue": "true",
            "description": "Add Shiny Framework by Allan Ritchie - Documentation: https://github.com/shinyorg/framework - Lots of helpful services like navigation, zero boilerplate MVVM properties, viewmodel validation, localization, viewmodel lifecycles, dialog services, and more",
            "displayName": "Add Shiny Framework (Shiny + ReactiveUI + Prism)"
        },
        "configuration": {
            "type": "parameter",
            "datatype": "bool",
            "defaultValue": "true",
            "description": "Add AppSettings.json (Shiny.Extensions.Configuration)",
            "displayName": "Add AppSettings.json (Shiny.Extensions.Configuration)"
        },
        "appcenter": {
            "type": "parameter",
            "dataType": "string",
            "description": "Your AppCenter Key (optional) - (Shiny.Logging.AppCenter)",
            "defaultValue": "",
            "replaces":"{APPCENTER_KEY}"
        },
        "bluetoothle": {
            "type": "parameter",
            "datatype": "bool",
            "defaultValue": "false",
            "description": "Add BluetoothLE Client (Shiny.BluetoothLE)",
            "displayName": "Add BluetoothLE Client (Shiny.BluetoothLE)"
        },
        "blehosting": {
            "type": "parameter",
            "datatype": "bool",
            "defaultValue": "false",
            "description": "Add BluetoothLE Hosting (Shiny.BluetoothLE.Hosting)",
            "displayName": "Add BluetoothLE Hosting (Shiny.BluetoothLE.Hosting)"
        },
        "beacons": {
            "type": "parameter",
            "datatype": "bool",
            "defaultValue": "false",
            "description": "Add Beacons (Shiny.Beacons)",
            "displayName": "Add Beacons (Shiny.Beacons)"
        },
        "jobs": {
            "type": "parameter",
            "datatype": "bool",
            "defaultValue": "false",
            "description": "Add Background Jobs (Shiny.Jobs)",
            "displayName": "Add Background Jobs (Shiny.Jobs)"
        },
        "gps":{
            "type": "parameter",
            "datatype": "bool",
            "defaultValue": "false",
            "description": "Add GPS (Shiny.Locations)",
            "displayName": "Add GPS (Shiny.Locations)"
        },
        "geofencing":{
            "type": "parameter",
            "datatype": "bool",
            "defaultValue": "false",
            "description": "Add Geofencing (Shiny.Locations)",
            "displayName": "Add Geofencing (Shiny.Locations)"            
        },
        "motionactivity":{
            "type": "parameter",
            "datatype": "bool",
            "defaultValue": "false",
            "description": "Add Motion Activity (Shiny.Locations)",
            "displayName": "Add Motion Activity (Shiny.Locations)"            
        },
        "httptransfers": {
            "type": "parameter",
            "datatype": "bool",
            "defaultValue": "false",
            "description": "Add Background HTTP Uploads & Downloads (Shiny.Net.Http)",
            "displayName": "Add Background HTTP Uploads & Downloads (Shiny.Net.Http)"
        },
        "nfc": {
            "type": "parameter",
            "datatype": "bool",
            "defaultValue": "false",
            "description": "Add NFC - iOS & Android Only (Shiny.NFC)",
            "displayName": "Add NFC - iOS & Android Only (Shiny.NFC)"
        },
        "notifications": {
            "type": "parameter",
            "datatype": "bool",
            "defaultValue": "false",
            "description": "Add Local Notifications (Shiny.Notifications)",
            "displayName": "Add Local Notifications (Shiny.Notifications)"
        },
        "speechrecognition": {
            "type": "parameter",
            "datatype": "bool",
            "defaultValue": "false",
            "description": "Add Speech Recognition (Shiny.SpeechRecognition)",
            "displayName": "Add Speech Recognition (Shiny.SpeechRecognition)"       
        },        
        "startup":{
            "type": "parameter",
            "datatype": "bool",
            "defaultValue": "false",
            "description": "Creates a class that executes immediately after Shiny is ready for action",
            "displayName": "Add Startup Service (Shiny.Core)"
        },
        "settings":{
            "type": "parameter",
            "datatype": "bool",
            "defaultValue": "false",
            "description": "This creates a special reactive object that binds to the platform preferences or secure storage",
            "displayName": "Add Bound Settings Class (Shiny.Core)"
        },
        "push": {
            "type": "parameter",
            "datatype": "choice",
            "defaultValue": "None",
            "description": "This will wire up all of the necessary permissions & libraries required for the selected push option.  You will still need to configure any additional API keys within the appsettings.json or MauiProgram.cs files",
            "displayName": "Add Push Notifications",
            "choices": [
                {
                    "choice": "None",
                    "description": "No push library is installed"
                },
                {
                    "choice": "Native",
                    "description": "Native (Shiny.Push)"
                },
                {
                    "choice": "Firebase",
                    "description": "Firebase Messaging - iOS/Android Only (Shiny.Push.FirebaseMessaging)"
                },
                {
                    "choice": "Azure Notification Hubs",
                    "description": "Azure Notifications Hubs (Shiny.Push.AzureNotificationHubs)"
                }
            ]
        },
        "authtype": {
            "type": "parameter",
            "description": "Authentication Setup - Microsoft Authentication Library (MSAL) - Documentation: https://devblogs.microsoft.com/dotnet/authentication-in-dotnet-maui-apps-msal/  - MAUI WebAuthenticator: https://learn.microsoft.com/en-us/dotnet/maui/platform-integration/communication/authentication",
            "displayName": "Authentication Setup",
            "datatype": "choice",
            "choices": [{
                "choice": "None",
                "description": "None"
            },{ 
                "choice": "MAUI Web Authenticator",
                "description": "MAUI Web Authenticator"
            },{                 
                "choice": "MSAL Basic",
                "description": "Microsoft Authentication Library - Basic"
            },{
                "choice": "MSAL AzureB2C",
                "description": "Microsoft Authentication Library - AzureB2C"
            },{
                "choice": "MSAL Broker",
                "description": "Microsoft Authentication Library - Broker"
            }],
            "defaultValue": "None"
        }, 
        "msalclientid":{
            "type": "parameter",
            "dataType": "string",
            "description": "This is your Microsoft Authentication Library (MSAL) Application/Client ID setup within the Azure Portal",
            "defaultValue": "",
            "replaces":"{MSAL_CLIENT_ID}"
        },
        "authservice":{
            "type": "parameter",
            "datatype": "bool",
            "defaultValue": "false",
            "description": "Creates a sample Microsoft Authentication Library (MSAL) or Web authenticator service to work with",
            "displayName": "Create Sample Authentication Service (if MSAL or Web Authenticator is selected)"
        },
        "maps":{
            "type": "parameter",
            "datatype": "bool",
            "defaultValue": "false",
            "description": "Setup MAUI Maps (.NET 7 Required)",
            "displayName": "Setup MAUI Maps (.NET 7 Required)"
        },
        "mapsandroidkey":{
            "type": "parameter",
            "dataType": "string",
            "description": "This is your Google Maps API Key setup within the Google Cloud Platform. Documentation: https://learn.microsoft.com/en-us/xamarin/xamarin-forms/user-interface/map/setup",
            "displayName": "Sets your Android Maps API Key (used if MAUI Maps is selected)",
            "defaultValue": "",
            "replaces":"{MAUI_MAPS_ANDROID_KEY}"
        },
        "essentialsmedia":{
            "type": "parameter",
            "datatype": "bool",
            "defaultValue": "false",
            "description": "Sets all up all the necessary boilerplate for the MAUI Essentials Media Picker",
            "displayName": "Setup MAUI Essentials - Media Picker"
        },
        "communitytoolkit":{
            "type": "parameter",
            "datatype": "bool",
            "defaultValue": "true",
            "description": "MAUI Community Toolkit - Documentation: https://learn.microsoft.com/en-us/dotnet/communitytoolkit/maui/",
            "displayName": "Add MAUI Community Toolkit"
        },
        "sqlite": {
            "type": "parameter",
            "datatype": "bool",
            "defaultValue": "false",
            "description": "SQLite.NET-PCL by Frank Krueger - Documentation: https://github.com/praeclarum/sqlite-net",
            "displayName": "Add SQLite (SQLite.NET-PCL)"
        },        
        "barcodes":{
            "type": "parameter",
            "datatype": "bool",
            "defaultValue": "false",
            "description": "Wire up all of the barcode scanning services for ZXing.Net.MAUI by Jon Dick - For documentation, go to https://github.com/Redth/ZXing.Net.Maui",
            "displayName": "Add Barcode Scanning & Rendering (ZXing.Net.MAUI)"
        },
        "inappbilling":{
            "type": "parameter",
            "datatype": "bool",
            "defaultValue": "false",
            "description": "In-App Billing by James Montemagno - For documentation, go to https://github.com/jamesmontemagno/InAppBillingPlugin",
            "displayName": "Add In-App Billing (Plugin.InAppBilling)"
        },
        "storereview":{
            "type": "parameter",
            "datatype": "bool",
            "defaultValue": "false",
            "description": "Store Review Plugin by James Montemagno - For documentation, go to https://github.com/jamesmontemagno/StoreReviewPlugin",
            "displayName": "Add Store Review (Plugin.StoreReview)"
        },
        "audio":{
            "type": "parameter",
            "datatype": "bool",
            "defaultValue": "false",
            "description": "Audio Plugin by Gerald Versluis - For documentation, go to https://github.com/jfversluis/Plugin.Maui.Audio",
            "displayName": "Add Audio (Plugin.Maui.Audio)"
        }, 
        "fingerprint":{
            "type": "parameter",
            "datatype": "bool",
            "defaultValue": "false",
            "description": "Fingerprint Plugin by Sven-Michael Stübe - For documentation, go to https://github.com/smstuebe/xamarin-fingerprint",
            "displayName": "Add Fingerprint/Facial Recognition (Plugin.Fingerprint)"
        },
        "HostIdentifier": {
            "type": "bind",
            "binding": "HostIdentifier"
        },
        "usewebauthenticator":{
            "type": "computed",
            "datatype": "bool",
            "value": "(authtype == \"MAUI Web Authenticator\")"
        },
        "usemsal":{
            "type": "computed",
            "datatype": "bool",
            "value": "(authtype == \"MSAL Basic\" || authtype == \"MSAL AzureB2C\" || authtype == \"MSAL Broker\")"
        },
        "usemaps":{
            "type": "computed",
            "datatype": "bool",
            "value": "(maps == true && Framework == \"net7.0\")"
        },
        "usemsalbasic":{
            "type": "computed",
            "datatype": "bool",
            "value": "(authtype == \"MSAL Basic\")"
        },
        "usemsalb2c":{
            "type": "computed",
            "datatype": "bool",
            "value": "(authtype == \"MSAL AzureB2C\")"
        },
        "usemsalbroker":{
            "type": "computed",
            "datatype": "bool",
            "value": "(authtype == \"MSAL Broker\")"
        },
        "usepushnative":{
            "type": "computed",
            "datatype": "bool",
            "value": "(push == \"Native\")"
        },
        "usepushfirebase":{
            "type": "computed",
            "datatype": "bool",
            "value": "(push == \"Firebase\")"
        },
        "usepushanh":{
            "type": "computed",
            "datatype": "bool",
            "value": "(push == \"Azure Notification Hubs\")"
        },
        "usepush":{
            "type": "computed",
            "datatype": "bool",
            "value": "(push != \"None\")"
        },
        "useconfig":{
            "type": "computed",
            "datatype": "bool",
            "value": "(configuration || push != \"None\" || appcenter != \"\" || authtype != \"None\")"
        },
        "useappcenter":{
            "type": "computed",
            "datatype": "bool",
            "value": "(appcenter != \"\")"
        },
        "useentitlements":{
            "type": "computed",
            "datatype": "bool",
            "value": "(push != \"None\" || nfc || authtype != \"None\")"
        },
        "usemaccatalyst":{
            "type": "computed",
            "datatype": "bool",
            "value": "(usepushfirebase == false)"
        }
    },
    "sources": [{
        "source": "./",
        "target": "./",
        "copyOnly": [
            "**/*.svg",
            "**/*.ttf",
            "**/*.txt"
        ],
        "modifiers": [{
            "condition": "(useconfig == false)",
            "exclude": "appsettings.json"
        },
        {
            "condition": "(push == \"None\")",
            "exclude": "MyPushDelegate.cs"
        },
        {
            "condition": "(httptransfers == false)",
            "exclude": "MyHttpTransferDelegate.cs"
        },
        {
            "condition": "(gps == false)",
            "exclude": "MyGpsDelegate.cs"
        },
        {
            "condition": "(useentitlements == false)",
            "exclude": "Platforms/iOS/Entitlements.plist"
        },
        {
            "condition": "(useentitlements == false)",
            "exclude": "Platforms/MacCatalyst/Entitlements.plist"
        },            
        {
            "condition": "(geofencing == false)",
            "exclude": "MyGeofenceDelegate.cs"
        },
        {
            "condition": "(jobs == false)",
            "exclude": "MyJob.cs"
        },
        {
            "condition": "(blehosting == false)",
            "exclude": "MyBleGattCharacteristic.cs"
        },            
        {
            "condition": "(beacons == false)",
            "exclude": "MyBeaconMonitoringDelegate.cs"
        },
        {
            "condition": "(sqlite == false)",
            "exclude": "MySqliteConnection.cs"
        },
        {
            "condition": "(startup == false)",
            "exclude": "AppStartup.cs"
        },
        {
            "condition": "(settings == false)",
            "exclude": "AppSettings.cs"
        },
        {
            "condition": "(shinyframework == false)",
            "exclude": "FodyWeavers.xml"
        },
        {
            "condition": "(authservice == false)",
            "exclude": "AuthService.cs"
        },
        {
            "condition": "(usemsalbasic == false && usemsalb2c == false)",
            "exclude": "Platforms/Android/MsalActivity.cs"
        },
        {
            "condition": "(usewebauthenticator == false)",
            "exclude": "Platforms/Android/WebAuthenticatorActivity.cs"
        },
        {
            "condition": "(notifications == false)",
            "exclude": "Resources/Images/notification.svg"
        }]
    }]    
}